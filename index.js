const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const {
    joinVoiceChannel,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus
} = require('@discordjs/voice');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();
const TOKEN = process.env.TOKEN;

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// ========== SLASH-–ö–û–ú–ê–ù–î–ê /clean ==========
const commands = [
    new SlashCommandBuilder()
        .setName('clean')
        .setDescription('üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        .addIntegerOption(option =>
            option.setName('–∫—ñ–ª—å–∫—ñ—Å—Ç—å')
                .setDescription('–°–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–¥–∞–ª–∏—Ç–∏ (1‚Äì100)')
                .setRequired(true)
        )
        .toJSON()
];

// ========== –ü–†–ò –ó–ê–ü–£–°–ö–£ ==========
const AUTO_DELETE_CHANNEL_ID = '1369413651416748104';
const DELETE_INTERVAL_MS = 60 * 60 * 1000;

client.once('ready', async () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Slash-–∫–æ–º–∞–Ω–¥
    const rest = new REST({ version: '10' }).setToken(TOKEN);
    try {
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commands }
        );
        console.log('üìå Slash-–∫–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ');
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥:', err);
    }

    // –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    setInterval(async () => {
        const channel = await client.channels.fetch(AUTO_DELETE_CHANNEL_ID);
        if (!channel.isTextBased()) return;

        try {
            const messages = await channel.messages.fetch({ limit: 100 });
            const now = Date.now();
            messages.forEach(msg => {
                const age = now - msg.createdTimestamp;
                if (age > 24 * 60 * 60 * 1000) {
                    msg.delete().catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', err));
                }
            });
        } catch (err) {
            console.error('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç—Ü—ñ:', err);
        }
    }, DELETE_INTERVAL_MS);
});

// ========== –í–•–Ü–î –í –ì–û–õ–û–°–û–í–ò–ô –ö–ê–ù–ê–õ ==========
client.on('voiceStateUpdate', async (oldState, newState) => {
    if (!oldState.channel && newState.channel) {
        const member = newState.member;
        const channel = newState.channel;

        if (member.user.bot) return;
        await member.fetch();

        let audioFile = null;

        for (const role of member.roles.cache.values()) {
            const mp3Path = path.join(__dirname, 'mp3', `${role.name}.mp3`);
            const oggPath = path.join(__dirname, 'mp3', `${role.name}.ogg`);

            if (fs.existsSync(mp3Path)) {
                audioFile = mp3Path;
                break;
            } else if (fs.existsSync(oggPath)) {
                audioFile = oggPath;
                break;
            }
        }

        if (!audioFile) {
            console.log(`‚ùå ${member.user.tag} ‚Äî –Ω–µ–º–∞—î –∞—É–¥—ñ–æ –∑–∞ —Ä–æ–ª—è–º–∏`);
            return;
        }

        try {
            const connection = joinVoiceChannel({
                channelId: channel.id,
                guildId: channel.guild.id,
                adapterCreator: channel.guild.voiceAdapterCreator,
                selfDeaf: false,
            });

            const player = createAudioPlayer();
            const resource = createAudioResource(audioFile);
            player.play(resource);
            connection.subscribe(player);

            player.on(AudioPlayerStatus.Idle, () => {
                connection.destroy();
            });
        } catch (err) {
            console.error('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è:', err);
        }
    }
});

// ========== –û–ë–†–û–ë–ö–ê –°–¢–ê–†–ò–• –ö–û–ú–ê–ù–î (!–¥–æ–±–∞–≤–∏—Ç—å) ==========
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    const content = message.content.trim().toLowerCase();

    if (content === '!help' || content === '!info') {
        return message.reply(`
üì¢ **Voice Role Bot ‚Äî —Å–ø—Ä–∞–≤–∫–∞**

üîä –ë–æ—Ç –ø—Ä–æ–≥—Ä–∞—î –∑–≤—É–∫ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª, —è–∫—â–æ —É —Ç–µ–±–µ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ —Ä–æ–ª—å.

üéß **–ö–æ–º–∞–Ω–¥–∞:**
\`!–¥–æ–±–∞–≤–∏—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–ª–∏>\` ‚Äî –ø—Ä–∏–∫—Ä—ñ–ø–∏ .mp3 –∞–±–æ .ogg —Ñ–∞–π–ª, —è–∫–∏–π –±—É–¥–µ –ø—Ä–æ–≥—Ä–∞–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ.

üìå **–ü—Ä–∏–∫–ª–∞–¥:**
\`!–¥–æ–±–∞–≤–∏—Ç—å –ë–æ–¥—è\` + –∞—É–¥—ñ–æ—Ñ–∞–π–ª

üîí –ú–æ–∂–Ω–∞ –ª–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏—Ö —Ä–æ–ª–µ–π.
        `);
    }

    if (message.content.startsWith('!addvoice')) {
        const args = message.content.split(' ');
        const roleName = args.slice(1).join(' ').trim();
        if (!roleName) return message.reply('‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Ä–æ–ª—ñ. –ü—Ä–∏–∫–ª–∞–¥: `!addvoice –ë–æ–¥—è`');

        const member = message.member;
        const targetRole = member.roles.cache.find(r => r.name === roleName);
        if (!targetRole) return message.reply(`‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ä–æ–ª—ñ "${roleName}"`);

        if (message.attachments.size === 0)
            return message.reply('‚ùå –ü—Ä–∏–∫—Ä—ñ–ø–∏ `.mp3` –∞–±–æ `.ogg` —Ñ–∞–π–ª.');

        const attachment = message.attachments.first();
        const extension = path.extname(attachment.name || '').toLowerCase();
        if (!['.mp3', '.ogg'].includes(extension))
            return message.reply('‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ .mp3 –∞–±–æ .ogg');

        const oldMp3 = path.join(__dirname, 'mp3', `${roleName}.mp3`);
        const oldOgg = path.join(__dirname, 'mp3', `${roleName}.ogg`);
        if (fs.existsSync(oldMp3)) fs.unlinkSync(oldMp3);
        if (fs.existsSync(oldOgg)) fs.unlinkSync(oldOgg);

        const filePath = path.join(__dirname, 'mp3', `${roleName}${extension}`);

        try {
            const response = await axios.get(attachment.url, { responseType: 'stream' });
            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            writer.on('finish', () => {
                message.reply(`‚úÖ –ê—É–¥—ñ–æ –¥–ª—è —Ä–æ–ª—ñ **${roleName}** –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
            });

            writer.on('error', err => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É:', err);
                message.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.');
            });
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err);
            message.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.');
        }
    }
});

// ========== SLASH-–ö–û–ú–ê–ù–î–ê /clean ==========
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === '!clean') {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return interaction.reply({
                content: '‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.',
                ephemeral: true
            });
        }

        const count = interaction.options.getInteger('–∫—ñ–ª—å–∫—ñ—Å—Ç—å');

        await interaction.deferReply({ ephemeral: true });

        let deleted = 0;
        try {
            let fetched;
            do {
                fetched = await interaction.channel.messages.fetch({ limit: 100 });
                const deletable = fetched.filter(msg => (Date.now() - msg.createdTimestamp) < 14 * 24 * 60 * 60 * 1000);

                if (deletable.size === 0) break;

                const deletedBatch = await interaction.channel.bulkDelete(deletable, true);
                deleted += deletedBatch.size;
            } while (deleted < count);

            await interaction.editReply(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ ${deleted} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.`);

        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', err);
            await interaction.editReply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ.');
        }
    }
});

// ========== –ü–û–ú–ò–õ–ö–ò ==========
process.on('unhandledRejection', err => {
    console.error('‚ùó Unhandled error:', err);
});

client.login(TOKEN);
