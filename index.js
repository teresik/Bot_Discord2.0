const { Client, GatewayIntentBits } = require('discord.js');
const {
    joinVoiceChannel,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus
} = require('@discordjs/voice');
const path = require('path');
const fs = require('fs');
const axios = require('axios');


require('dotenv').config();
const TOKEN = process.env.TOKEN;

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

const AUTO_DELETE_CHANNEL_ID = '1369413651416748104'; // –ó–∞–º—ñ–Ω–∏ –Ω–∞ ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
const DELETE_INTERVAL_MS = 60 * 60 * 1000; // –©–æ–≥–æ–¥–∏–Ω–∏ (1 –≥–æ–¥–∏–Ω–∞)

client.once('ready', () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    setInterval(async () => {
        const channel = await client.channels.fetch(AUTO_DELETE_CHANNEL_ID);
        if (!channel.isTextBased()) return;

        try {
            const messages = await channel.messages.fetch({ limit: 100 });

            const now = Date.now();
            messages.forEach(msg => {
                const age = now - msg.createdTimestamp;
                if (age > 24 * 60 * 60 * 1000) { // 24 –≥–æ–¥–∏–Ω–∏
                    msg.delete().catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', err));
                }
            });
        } catch (err) {
            console.error('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç—Ü—ñ:', err);
        }
    }, DELETE_INTERVAL_MS);
});

// üéß –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
client.on('voiceStateUpdate', async (oldState, newState) => {
    if (!oldState.channel && newState.channel) {
        const member = newState.member;
        const channel = newState.channel;

        if (member.user.bot) return;

        await member.fetch(); // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π

        let audioFile = null;

        for (const role of member.roles.cache.values()) {
            const mp3Path = path.join(__dirname, 'mp3', `${role.name}.mp3`);
            const oggPath = path.join(__dirname, 'mp3', `${role.name}.ogg`);

            if (fs.existsSync(mp3Path)) {
                audioFile = mp3Path;
                break;
            } else if (fs.existsSync(oggPath)) {
                audioFile = oggPath;
                break;
            }
        }

        if (!audioFile) {
            console.log(`‚ùå ${member.user.tag} ‚Äî –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø–æ —Ä–æ–ª—è–º`);
            return;
        }

        try {
            const connection = joinVoiceChannel({
                channelId: channel.id,
                guildId: channel.guild.id,
                adapterCreator: channel.guild.voiceAdapterCreator,
                selfDeaf: false,
            });

            const player = createAudioPlayer();
            const resource = createAudioResource(audioFile);
            player.play(resource);
            connection.subscribe(player);

            player.on(AudioPlayerStatus.Idle, () => {
                connection.destroy();
            });

        } catch (err) {
            console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:', err);
        }
    }
});

// üí¨ –ö–æ–º–∞–Ω–¥–∞ !–¥–æ–±–∞–≤–∏—Ç—å <—Ä–æ–ª—å> —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const content = message.content.trim().toLowerCase();

    // –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
    if (content === '!help' || content === '!info') {
        return message.reply(`
üì¢ **Voice Role Bot ‚Äî —Å–ø—Ä–∞–≤–∫–∞**

üîä –ë–æ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–≤—É–∫ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–æ–ª—å —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ.

üéß **–ö–æ–º–∞–Ω–¥–∞:**
\`!–¥–æ–±–∞–≤–∏—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–ª–∏>\` ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .mp3 –∏–ª–∏ .ogg —Ñ–∞–π–ª, –∏ –æ–Ω –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –≤—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.

üìå **–ü—Ä–∏–º–µ—Ä—ã:**
\`!–¥–æ–±–∞–≤–∏—Ç—å –ë–æ–¥—è\` + –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª

üéµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: \`.mp3\`, \`.ogg\`

üîí –ú–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∑–≤—É–∫ **—Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º —Ä–æ–ª—è–º**
üí° –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–≤—É–∫, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª

–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª üòé
        `);
    }

    // –ö–æ–º–∞–Ω–¥–∞ !–¥–æ–±–∞–≤–∏—Ç—å <—Ä–æ–ª—å>
    if (message.content.startsWith('!–¥–æ–±–∞–≤–∏—Ç—å')) {
        const args = message.content.split(' ');
        const roleName = args.slice(1).join(' ').trim();

        if (!roleName) {
            return message.reply('‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏. –ü—Ä–∏–º–µ—Ä: `!–¥–æ–±–∞–≤–∏—Ç—å –ë–æ–¥—è`');
        }

        const member = message.member;
        const targetRole = member.roles.cache.find(r => r.name === roleName);

        if (!targetRole) {
            return message.reply(`‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ä–æ–ª–∏ "${roleName}"`);
        }

        if (message.attachments.size === 0) {
            return message.reply('‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏ `.mp3` –∏–ª–∏ `.ogg` —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.');
        }

        const attachment = message.attachments.first();
        const extension = path.extname(attachment.name || '').toLowerCase();

        if (!['.mp3', '.ogg'].includes(extension)) {
            return message.reply('‚ùå –¢–æ–ª—å–∫–æ .mp3 –∏–ª–∏ .ogg —Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.');
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–æ–ª–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        const oldMp3 = path.join(__dirname, 'mp3', `${roleName}.mp3`);
        const oldOgg = path.join(__dirname, 'mp3', `${roleName}.ogg`);

        if (fs.existsSync(oldMp3)) fs.unlinkSync(oldMp3);
        if (fs.existsSync(oldOgg)) fs.unlinkSync(oldOgg);

        const filePath = path.join(__dirname, 'mp3', `${roleName}${extension}`);


        try {
            const response = await axios.get(attachment.url, { responseType: 'stream' });
            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            writer.on('finish', () => {
                message.reply(`‚úÖ –ê—É–¥–∏–æ –¥–ª—è —Ä–æ–ª–∏ **${roleName}** —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
            });

            writer.on('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
                message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª.');
            });
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
            message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', err => {
    console.error('‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});

client.login(TOKEN);
