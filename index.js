// index.js
const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const {
    joinVoiceChannel,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus
} = require('@discordjs/voice');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();

const TOKEN = process.env.TOKEN;
const AUTO_DELETE_CHANNEL_ID = '1369413651416748104';
const DELETE_INTERVAL_MS = 60 * 60 * 1000;

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

const commands = [
    new SlashCommandBuilder()
        .setName('addvoice')
        .setDescription('üéß –ü—Ä–∏–≤\'—è–∑–∞—Ç–∏ –∑–≤—É–∫ –¥–æ —Å–≤–æ—î—ó —Ä–æ–ª—ñ')
        .addStringOption(option =>
            option.setName('—Ä–æ–ª—å')
                .setDescription('–ù–∞–∑–≤–∞ —Ä–æ–ª—ñ, –¥–æ —è–∫–æ—ó –ø—Ä–∏–≤\'—è–∑–∞—Ç–∏ –∑–≤—É–∫')
                .setRequired(true)
        )
        .addAttachmentOption(option =>
            option.setName('—Ñ–∞–π–ª')
                .setDescription('–ê—É–¥—ñ–æ—Ñ–∞–π–ª (.mp3 –∞–±–æ .ogg)')
                .setRequired(true)
        ),

    new SlashCommandBuilder()
        .setName('clean')
        .setDescription('üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        .addIntegerOption(option =>
            option.setName('–∫—ñ–ª—å–∫—ñ—Å—Ç—å')
                .setDescription('–°–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–¥–∞–ª–∏—Ç–∏ (1‚Äì100)')
                .setRequired(true)
        )
].map(command => command.toJSON());

client.once('ready', async () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —è–∫ ${client.user.tag}`);

    const rest = new REST({ version: '10' }).setToken(TOKEN);
    try {
        await rest.put(Routes.applicationCommands(client.user.id), { body: commands });
        console.log('üìå Slash-–∫–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ');
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥:', err);
    }

    setInterval(async () => {
        const channel = await client.channels.fetch(AUTO_DELETE_CHANNEL_ID);
        if (!channel.isTextBased()) return;

        try {
            const messages = await channel.messages.fetch({ limit: 100 });
            const now = Date.now();
            messages.forEach(msg => {
                const age = now - msg.createdTimestamp;
                if (age > 24 * 60 * 60 * 1000) {
                    msg.delete().catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', err));
                }
            });
        } catch (err) {
            console.error('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç—Ü—ñ:', err);
        }
    }, DELETE_INTERVAL_MS);
});

client.on('voiceStateUpdate', async (oldState, newState) => {
    if (!oldState.channel && newState.channel) {
        const member = newState.member;
        if (member.user.bot) return;

        await member.fetch();
        let audioFile = null;

        for (const role of member.roles.cache.values()) {
            const mp3Path = path.join(__dirname, 'mp3', `${role.name}.mp3`);
            const oggPath = path.join(__dirname, 'mp3', `${role.name}.ogg`);

            if (fs.existsSync(mp3Path)) {
                audioFile = mp3Path;
                break;
            } else if (fs.existsSync(oggPath)) {
                audioFile = oggPath;
                break;
            }
        }

        if (!audioFile) return;

        try {
            const connection = joinVoiceChannel({
                channelId: newState.channel.id,
                guildId: newState.guild.id,
                adapterCreator: newState.guild.voiceAdapterCreator,
                selfDeaf: false
            });

            const player = createAudioPlayer();
            const resource = createAudioResource(audioFile);
            player.play(resource);
            connection.subscribe(player);

            player.on(AudioPlayerStatus.Idle, () => connection.destroy());
        } catch (err) {
            console.error('‚ùó –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É:', err);
        }
    }
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const content = message.content.trim().toLowerCase();
    if (content === '!help' || content === '!info') {
        return message.reply(`
üì¢ **Voice Role Bot ‚Äî —Å–ø—Ä–∞–≤–∫–∞**

üîä –ë–æ—Ç –ø—Ä–æ–≥—Ä–∞—î –∑–≤—É–∫ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª, —è–∫—â–æ —É —Ç–µ–±–µ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ —Ä–æ–ª—å.

üéß **–ö–æ–º–∞–Ω–¥–∞:**
\`/addvoice <–Ω–∞–∑–≤–∞_—Ä–æ–ª—ñ> + –∞—É–¥—ñ–æ—Ñ–∞–π–ª\`

üßº **–û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É:**
\`/clean –∫—ñ–ª—å–∫—ñ—Å—Ç—å: 50\`

üîí –¢—ñ–ª—å–∫–∏ —Ç–∏ –º–æ–∂–µ—à –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–≤—É–∫ –¥–ª—è —Å–≤–æ—ó—Ö —Ä–æ–ª–µ–π.
‚úâÔ∏è –ù–∞–ø–∏—à–∏ / —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ Slash-–∫–æ–º–∞–Ω–¥–∏.
        `);
    }
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'clean') {
        const count = interaction.options.getInteger('–∫—ñ–ª—å–∫—ñ—Å—Ç—å');
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return interaction.reply({
                content: '‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.',
                ephemeral: true
            });
        }

        await interaction.deferReply({ ephemeral: true });
        let deleted = 0;

        try {
            let fetched;
            do {
                fetched = await interaction.channel.messages.fetch({ limit: 100 });
                const deletable = fetched.filter(msg => (Date.now() - msg.createdTimestamp) < 14 * 24 * 60 * 60 * 1000);
                if (deletable.size === 0) break;
                const deletedBatch = await interaction.channel.bulkDelete(deletable, true);
                deleted += deletedBatch.size;
            } while (deleted < count);

            await interaction.editReply(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ ${deleted} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.`);
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', err);
            await interaction.editReply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ.');
        }
    }

    if (interaction.commandName === 'addvoice') {
        const roleName = interaction.options.getString('—Ä–æ–ª—å');
        const file = interaction.options.getAttachment('—Ñ–∞–π–ª');
        const member = interaction.member;

        const targetRole = member.roles.cache.find(r => r.name === roleName);
        if (!targetRole) {
            return interaction.reply({ content: `‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ä–æ–ª—ñ "${roleName}".`, ephemeral: true });
        }

        const extension = path.extname(file.name || '').toLowerCase();
        if (!['.mp3', '.ogg'].includes(extension)) {
            return interaction.reply({ content: '‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ `.mp3` –∞–±–æ `.ogg` —Ñ–∞–π–ª–∏.', ephemeral: true });
        }

        const oldMp3 = path.join(__dirname, 'mp3', `${roleName}.mp3`);
        const oldOgg = path.join(__dirname, 'mp3', `${roleName}.ogg`);
        if (fs.existsSync(oldMp3)) fs.unlinkSync(oldMp3);
        if (fs.existsSync(oldOgg)) fs.unlinkSync(oldOgg);

        const filePath = path.join(__dirname, 'mp3', `${roleName}${extension}`);

        try {
            await interaction.deferReply({ ephemeral: true });
            const response = await axios.get(file.url, { responseType: 'stream' });
            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            writer.on('finish', () => {
                interaction.editReply(`‚úÖ –ê—É–¥—ñ–æ –¥–ª—è —Ä–æ–ª—ñ **${roleName}** –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
            });

            writer.on('error', err => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É:', err);
                interaction.editReply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.');
            });
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err);
            interaction.editReply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.');
        }
    }
});

process.on('unhandledRejection', err => {
    console.error('‚ùó Unhandled error:', err);
});

client.login(TOKEN);
